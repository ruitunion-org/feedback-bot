// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RuItUnion.FeedbackBot.Data;

#nullable disable

namespace RuItUnion.FeedbackBot.Data.Migrations
{
    [DbContext(typeof(FeedbackBotContext))]
    [Migration("20241117151116_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FeedbackBot")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RuItUnion.FeedbackBot.Data.Models.DbReply", b =>
                {
                    b.Property<int>("ChatMessageId")
                        .HasColumnType("integer");

                    b.Property<int>("ChatThreadId")
                        .HasColumnType("integer");

                    b.Property<int>("UserMessageId")
                        .HasColumnType("integer");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("ChatMessageId");

                    b.HasIndex("ChatThreadId");

                    b.ToTable("Replies", "FeedbackBot");
                });

            modelBuilder.Entity("RuItUnion.FeedbackBot.Data.Models.DbTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsOpen")
                        .HasColumnType("boolean");

                    b.Property<int>("ThreadId")
                        .HasColumnType("integer");

                    b.Property<long>("UserChatId")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId")
                        .IsUnique();

                    b.HasIndex("UserChatId")
                        .IsUnique();

                    b.ToTable("Topics", "FeedbackBot");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbBan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(true)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Until");

                    b.ToTable("Bans", "FeedbackBot");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("MentionEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("character varying(32)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Roles", "FeedbackBot");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            MentionEnabled = false,
                            Name = "admin"
                        },
                        new
                        {
                            Id = -2,
                            MentionEnabled = false,
                            Name = "ban_list"
                        });
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbRoleMember", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleMembers", "FeedbackBot");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbUser", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .IsUnicode(true)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("UserName")
                        .HasMaxLength(32)
                        .IsUnicode(true)
                        .HasColumnType("character varying(32)");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", "FeedbackBot");
                });

            modelBuilder.Entity("RuItUnion.FeedbackBot.Data.Models.DbReply", b =>
                {
                    b.HasOne("RuItUnion.FeedbackBot.Data.Models.DbTopic", "Topic")
                        .WithMany("Replies")
                        .HasForeignKey("ChatThreadId")
                        .HasPrincipalKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("RuItUnion.FeedbackBot.Data.Models.DbTopic", b =>
                {
                    b.HasOne("TgBotFrame.Commands.Authorization.Models.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbBan", b =>
                {
                    b.HasOne("TgBotFrame.Commands.Authorization.Models.DbUser", "User")
                        .WithMany("Bans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbRoleMember", b =>
                {
                    b.HasOne("TgBotFrame.Commands.Authorization.Models.DbRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TgBotFrame.Commands.Authorization.Models.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RuItUnion.FeedbackBot.Data.Models.DbTopic", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TgBotFrame.Commands.Authorization.Models.DbUser", b =>
                {
                    b.Navigation("Bans");
                });
#pragma warning restore 612, 618
        }
    }
}
